import sqlalchemy
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

### ==================== —Å–æ—Å—Ç–æ—è–Ω–∏—è ====================


class Diagnose(StatesGroup):
    SELECT_APP = State()
    RESULT = State()
    TASKS = State()

class RepairTask(StatesGroup):
    SELECT_APP = State()
    MECHANIC_REPORT = State()

### ==================== KEYBOARDS ====================
client_menu = ReplyKeyboardMarkup(resize_keyboard=True)
client_menu.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ", "üöó –ú–æ–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏")
client_menu.add("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")

admin_menu = ReplyKeyboardMarkup(resize_keyboard=True)
admin_menu.add("üì® –í—Å–µ –∑–∞—è–≤–∫–∏", "üÜï –û–∂–∏–¥–∞—é—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
admin_menu.add("‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ", "üîß –ì–æ—Ç–æ–≤–æ –∫ —Ä–µ–º–æ–Ω—Ç—É")
admin_menu.add("üìä –û—Ç—á–µ—Ç –ø–æ –∑–∞–ø—á–∞—Å—Ç—è–º", "üí≥ –û–ø–ª–∞—Ç—ã")
admin_menu.add("üîç –ü–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", "üîÑ –°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤.")

diagnostic_menu = ReplyKeyboardMarkup(resize_keyboard=True)
diagnostic_menu.add("üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏", "üìã –ò—Å—Ç–æ—Ä–∏—è")

mechanic_menu = ReplyKeyboardMarkup(resize_keyboard=True)
mechanic_menu.add("üÜï –ö —Ä–∞–±–æ—Ç–µ", "üìã –ò—Å—Ç–æ—Ä–∏—è")

### ==================== START HANDLER ====================
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await Registration.NAME.set()
    else:
        if user.role.value == 'client':
            await message.answer("–ö–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –º–µ–Ω—é:", reply_markup=client_menu)
        elif user.role.value in ('admin','superadmin'):
            await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu)
        elif user.role.value == 'diagnostic':
            await message.answer("–ú–µ–Ω—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:", reply_markup=diagnostic_menu)
        elif user.role.value == 'mechanic':
            await message.answer("–ú–µ–Ω—é –º–µ—Ö–∞–Ω–∏–∫–∞:", reply_markup=mechanic_menu)



### ==================== REGISTRATIONS HANDLERS ====================
@dp.message_handler(state=Registration.NAME)
async def process_name(message: types.Message, state: Registration):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (+7...):")
    await Registration.PHONE.set()

@dp.message_handler(state=Registration.PHONE)
async def process_phone(message: types.Message, state: Registration):
    if not validate_phone(message.text):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ +7...")
    data = await state.get_data()
    await register_client(message.from_user.id, data['name'], message.text)
    await state.finish()
    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup=client_menu)

### ==================== CLIENT HANDLERS ====================
@dp.message_handler(lambda m: m.text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def cmd_create_app(message: types.Message):
    cars = await get_user_cars(message.from_user.id)
    kb = InlineKeyboardMarkup()
    for car in cars:
        kb.add(InlineKeyboardButton(f"{car.brand} {car.model} ({car.number})", callback_data=f"select_car:{car.id}"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å:" , reply_markup=kb)
    await CreateApp.SELECT_CAR.set()

@dp.callback_query_handler(lambda c: c.data.startswith("select_car"), state=CreateApp.SELECT_CAR)
async def car_selected(cq: types.CallbackQuery, state: FSMContext):
    await state.update_data(car_id=int(cq.data.split(':')[1]))
    await cq.message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:")
    await CreateApp.DESCRIPTION.set()

@dp.message_handler(state=CreateApp.DESCRIPTION)
async def proc_descr(m: types.Message, state: FSMContext):
    await state.update_data(description=m.text)
    kb = InlineKeyboardMarkup(row_width=3)
    for p in ["HIGH","MEDIUM","LOW"]:
        kb.insert(InlineKeyboardButton(p, callback_data=f"prio:{p}"))
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:", reply_markup=kb)
    await CreateApp.PRIORITY.set()

@dp.callback_query_handler(lambda c: c.data.startswith("prio"), state=CreateApp.PRIORITY)
async def set_priority(cq: types.CallbackQuery, state: FSMContext):
    pr = cq.data.split(':')[1]
    await state.update_data(priority=pr)
    await cq.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É (YYYY-MM-DD):")
    await CreateApp.DATE.set()

@dp.message_handler(state=CreateApp.DATE)
async def proc_date(m: types.Message, state: FSMContext):
    data = await state.get_data()
    await create_application(
        client_id=m.from_user.id,
        car_id=data['car_id'],
        problem_description=data['description'],
        priority=data['priority'],
        date=datetime.strptime(m.text, "%Y-%m-%d")
    )
    await m.answer("‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞.", reply_markup=client_menu)
    await state.finish()

#–¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ
@dp.message_handler(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ")
async def cmd_add_car(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    await AddCar.BRAND.set()

@dp.message_handler(state=AddCar.BRAND)
async def proc_brand(message: Message, state: FSMContext):
    await state.update_data(brand=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å:")
    await AddCar.MODEL.set()

@dp.message_handler(state=AddCar.MODEL)
async def proc_model(message: Message, state: FSMContext):
    await state.update_data(model=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å.–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    await AddCar.NUMBER.set()

@dp.message_handler(state=AddCar.NUMBER)
async def proc_number(message: Message, state: FSMContext):
    await state.update_data(number=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ VIN –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    await AddCar.VIN.set()

@dp.message_handler(state=AddCar.VIN)
async def proc_vin(message: Message, state: FSMContext):
    await state.update_data(vin=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    await AddCar.YEAR.set()


@dp.message_handler(state=AddCar.YEAR)
async def proc_year(message: Message, state: FSMContext):
    #–≤–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ–¥–∞
    if not message.text.isdigit() or not (1900 < int(message.text) <= datetime.now().year + 1):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥! –í–≤–µ–¥–∏—Ç–µ 4 —Ü–∏—Ñ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2015)")
        return

    data = await state.get_data()
    full_data = {
        **data,
        "year": int(message.text),
        "user_id": message.from_user.id
    }

    try:
        #–æ—Ç–ø—Ä–∞–≤–∫–∞
        await api_add_car(full_data)  #—Ç—É—Ç –Ω–∞–¥–æ –∑–∞–º–µ–Ω–∏—Ç—å
        await message.answer("‚úÖ –ê–≤—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=client_menu)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    await state.finish()

#–º–æ–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
@dp.message_handler(lambda m: m.text == "üöó –ú–æ–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏")
async def cmd_my_cars(message: Message):
    user_id = message.from_user.id
    cars = await get_user_cars(user_id)  #–∑–∞–ø—Ä–æ—Å

    if not cars:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.", reply_markup=client_menu)
        return

    for car in cars:
        text = (
            f"üöó {car['brand']} {car['model']}\n"
            f"‚ñ∏ –ì–æ—Å–Ω–æ–º–µ—Ä: {car['number']}\n"
            f"‚ñ∏ VIN: {car['vin']}\n"
            f"‚ñ∏ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {car['year']}"
        )
        await message.answer(text)


#–º–æ–∏ –∑–∞—è–≤–∫–∏
@dp.message_handler(lambda m: m.text == "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def cmd_my_apps(message: Message):
    user_id = message.from_user.id
    apps = await get_user_applications(user_id)  # –∑–∞–ø—Ä–æ—Å

    if not apps:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.", reply_markup=client_menu)
        return

    for app in apps:
        status = Status(app['status']).value
        text = (
            f"üìã –ó–∞—è–≤–∫–∞ #{app['id']}\n"
            f"‚ñ∏ –°—Ç–∞—Ç—É—Å: {status}\n"
            f"‚ñ∏ –ê–≤—Ç–æ: {app['car']['brand']} {app['car']['model']}\n"
            f"‚ñ∏ –î–∞—Ç–∞: {app['date']}\n"
            f"‚ñ∏ –û–ø–∏—Å–∞–Ω–∏–µ: {app['description']}"
            f"‚ñ∏ –î–∏–∞–≥–Ω–æ—Å—Ç: {app['diagnost']['name'] if app['diagnost'] else '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n"
            f"‚ñ∏ –ú–µ—Ö–∞–Ω–∏–∫: {app['mechanic']['name'] if app['mechanic'] else '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n"
        )
        await message.answer(text)


### ==================== ADMIN HANDLERS ====================
@dp.message_handler(lambda m: m.text == "üì® –í—Å–µ –∑–∞—è–≤–∫–∏")
async def all_apps(message: types.Message):
    apps = await get_all_applications()
    for app in apps:
        await message.answer(format_app_summary(app))

@dp.message_handler(lambda m: m.text == "üÜï –û–∂–∏–¥–∞—é—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
async def pending_validation(message: types.Message):
    apps = await get_applications_by_status('NEW')
    if not apps:
        return await message.answer("–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.")
    for app in apps:
        kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"admin_accept:{app.id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject:{app.id}")
        )
        await message.answer(format_app_summary(app), reply_markup=kb)

@dp.message_handler(lambda m: m.text == "‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ")
async def in_progress(message: types.Message):
    apps = await get_applications_by_status('DIAGNOSTIC') + await get_applications_by_status('REPAIR')
    if not apps:
        return await message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.")
    for app in apps:
        await message.answer(format_app_summary(app))

@dp.message_handler(lambda m: m.text == "üîß –ì–æ—Ç–æ–≤–æ –∫ —Ä–µ–º–æ–Ω—Ç—É")
async def ready_to_repair(message: types.Message):
    apps = await get_applications_by_status('READY')
    if not apps:
        return await message.answer("–ù–µ—á–µ–≥–æ —Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å.")
    for app in apps:
        await message.answer(format_app_summary(app))

@dp.message_handler(lambda m: m.text == "üìä –û—Ç—á–µ—Ç –ø–æ –∑–∞–ø—á–∞—Å—Ç—è–º")
async def parts_report(message: types.Message):
    report = await get_parts_inventory_report()
    text = "üì¶ –û—Ç—á–µ—Ç –ø–æ –∑–∞–ø—á–∞—Å—Ç—è–º:\n" + "\n".join(f"{item.name}: {item.remaining}" for item in report)
    await message.answer(text)

@dp.message_handler(lambda m: m.text == "üí≥ –û–ø–ª–∞—Ç—ã")
async def payments_report(message: types.Message):
    payments = await get_payments_report()
    for pay in payments:
        await message.answer(f"–ó–∞—è–≤–∫–∞ #{pay.app_id}: {pay.amount} —Ä—É–±. ‚Äî {pay.status}")

@dp.message_handler(lambda m: m.text == "üîÑ –°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑.")
async def user_statuses(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ user_id –∏–ª–∏ username –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
    await FSMContext.set_state('ADMIN_USER_FILTER')

@dp.message_handler(state='ADMIN_USER_FILTER')
async def filter_by_user(message: types.Message, state: FSMContext):
    key = message.text.strip()
    apps = await get_applications_by_user(key)
    if not apps:
        await message.answer("–ó–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    for app in apps:
        await message.answer(format_app_summary(app))
    await state.finish()

@dp.message_handler(lambda m: m.text == "üîç –ü–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
async def monitor_user(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ user_id –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤:")
    await FSMContext.set_state('MONITOR_USER')

@dp.message_handler(state='MONITOR_USER')
async def monitor_user_updates(message: types.Message, state: FSMContext):
    user_id = message.text.strip()
    updates = await stream_user_application_updates(user_id)
    for upd in updates:
        await message.answer(f"#{upd.app_id}: {upd.old_status} ‚Üí {upd.new_status} –≤ {upd.time}")
    await state.finish()

### ==================== DIAGNOSTIC HANDLERS ====================
@dp.message_handler(lambda m: m.text == "üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏")
async def diag_new(m: types.Message):
    apps = await get_apps_by_status(["WAITING"])
    kb = InlineKeyboardMarkup()
    for app in apps:
        kb.add(InlineKeyboardButton(f"#{app.id} ({app.car.brand})", callback_data=f"diag_app:{app.id}"))
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É:", reply_markup=kb)
    await Diagnose.SELECT_APP.set()

@dp.callback_query_handler(lambda c: c.data.startswith("diag_app"), state=Diagnose.SELECT_APP)
async def diag_select(cq: types.CallbackQuery, state: FSMContext):
    app_id = int(cq.data.split(':')[1])
    await update_app_status(app_id, "DIAGNOSTIC")
    await cq.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∞:")
    await state.update_data(app_id=app_id)
    await Diagnose.RESULT.set()

@dp.message_handler(state=Diagnose.RESULT)
async def diag_result(msg: types.Message, state: FSMContext):
    await state.update_data(result=msg.text)
    await msg.answer("–£–∫–∞–∂–∏—Ç–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –º–µ—Ö–∞–Ω–∏–∫–∞ (—á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")
    await Diagnose.TASKS.set()

@dp.message_handler(state=Diagnose.TASKS)
async def diag_tasks(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    tasks = [t.strip() for t in msg.text.split('.') if t.strip()]
    await save_diagnostic(
        application_id=data['app_id'],
        diag_id=msg.from_user.id,
        diagnostic_report=data['result'],
        tasks=tasks
    )
    await update_app_status(data['app_id'], "READY")
    await msg.answer(f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –∑–∞–¥–∞—á: {len(tasks)}", reply_markup=diagnostic_menu)
    await state.finish()

### ==================== MECHANIC HANDLERS ====================
@dp.message_handler(lambda m: m.text == "üÜï –ö —Ä–∞–±–æ—Ç–µ")
async def mech_new(m: types.Message):
    apps = await get_apps_by_status(["READY"])
    kb = InlineKeyboardMarkup()
    for app in apps:
        kb.add(InlineKeyboardButton(f"#{app.id} ({app.car.brand})", callback_data=f"mech_app:{app.id}"))
    await m.answer("–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –∫ —Ä–µ–º–æ–Ω—Ç—É:", reply_markup=kb)
    await RepairTask.SELECT_APP.set()

@dp.callback_query_handler(lambda c: c.data.startswith("mech_app"), state=RepairTask.SELECT_APP)
async def mech_select(cq: types.CallbackQuery, state: FSMContext):
    app_id = int(cq.data.split(':')[1])
    await update_app_status(app_id, "REPAIR")
    await cq.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á—ë—Ç –º–µ—Ö–∞–Ω–∏–∫–∞ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º —Ä–∞–±–æ—Ç–∞–º:")
    await state.update_data(app_id=app_id)
    await RepairTask.MECHANIC_REPORT.set()

@dp.message_handler(state=RepairTask.MECHANIC_REPORT)
async def mech_report(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    await save_mechanic_report(
        application_id=data['app_id'],
        mechanic_id=msg.from_user.id,
        mechanic_report=msg.text
    )
    await update_app_status(data['app_id'], "COMPLETED")
    await msg.answer("‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –∑–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=mechanic_menu)
    await state.finish()